[
  {
    "category": "Grundlagen Computergrafik",
    "type": "2D",
    "title": "Bresenham",
    "modelPath": "models/Cube.glb",
    "hints": [
      "Nutze Ganzzahllogik, um Linienpixel zu setzen"
    ],
    "task": "<p>Implementiere den Bresenham-Linienalgorithmus</p>\n",
    "theory": "<h2>1. Ausgangspunkt: die ideale Linie</h2>\n<p>Eine Linie zwischen zwei Punkten <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_0, y_0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> und <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_1, y_1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> kann in der Steigungsform geschrieben werden:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>y</mi><mo>=</mo><mi>m</mi><mo>⋅</mo><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">\ny = m \\cdot x + b\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span></span></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><mfrac><mrow><msub><mi>y</mi><mn>1</mn></msub><mo>−</mo><msub><mi>y</mi><mn>0</mn></msub></mrow><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>−</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">m = \\frac{y_1 - y_0}{x_1 - x_0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2995em;vertical-align:-0.4451em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8544em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4461em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173em;\"><span style=\"top:-2.357em;margin-left:-0.0359em;margin-right:0.0714em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.4451em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> → Steigung  </li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo>=</mo><msub><mi>y</mi><mn>0</mn></msub><mo>−</mo><mi>m</mi><mo>⋅</mo><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">b = y_0 - m \\cdot x_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> → y-Achsenabschnitt</li>\n</ul>\n<blockquote>\n<p>Das ist die &quot;perfekte&quot; Linie in kontinuierlichen Koordinaten.</p>\n</blockquote>\n<hr>\n<h2>2. Problem: Raster / Pixel</h2>\n<p>Auf einem Bildschirm oder Raster können wir <strong>nur Pixel mit ganzzahligen Koordinaten setzen</strong>.  </p>\n<ul>\n<li>Wir müssen entscheiden, <strong>welches Pixel in jeder Spalte gesetzt wird</strong>, um der Linie möglichst genau zu folgen.  </li>\n<li>Einfaches Runden der Gleitkommawerte ist möglich, aber <strong>langsam</strong>, weil es Multiplikationen und Rundungen benötigt.</li>\n</ul>\n<hr>\n<h2>3. Schrittweise Annäherung</h2>\n<p>Betrachte die Linie Schritt für Schritt von <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> nach <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>:  </p>\n<ul>\n<li>Aktuelles Pixel: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x, y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>  </li>\n<li>Ideale Linie: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>y</mi><mtext>ideal</mtext></msub><mo>=</mo><mi>m</mi><mo>⋅</mo><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">y_\\text{ideal} = m \\cdot x + b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">ideal</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span>  </li>\n<li>Wir müssen entscheiden: <strong>y bleibt gleich oder y wird um 1 erhöht?</strong></li>\n</ul>\n<hr>\n<h2>4. Differenzen definieren</h2>\n<p>Wir berechnen die Differenzen:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mi>x</mi><mo>=</mo><msub><mi>x</mi><mn>1</mn></msub><mo>−</mo><msub><mi>x</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mspace width=\"1em\"/><mi mathvariant=\"normal\">Δ</mi><mi>y</mi><mo>=</mo><msub><mi>y</mi><mn>1</mn></msub><mo>−</mo><msub><mi>y</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">\n\\Delta x = x_1 - x_0, \\quad \\Delta y = y_1 - y_0\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\">x</span></span></span></span> = horizontale Länge  </li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> = vertikale Länge</li>\n</ul>\n<p>Die Steigung der Linie ist <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>=</mo><mfrac><mrow><mi mathvariant=\"normal\">Δ</mi><mi>y</mi></mrow><mrow><mi mathvariant=\"normal\">Δ</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">m = \\frac{\\Delta y}{\\Delta x}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2694em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9244em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">Δ</span><span class=\"mord mathnormal mtight\">x</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.4461em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">Δ</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>.  </p>\n<hr>\n<h2>5. Fehlerbegriff</h2>\n<p>Wir definieren einen <strong>Fehler</strong>:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>Fehler</mtext><mo>=</mo><msub><mi>y</mi><mtext>ideal</mtext></msub><mo>−</mo><msub><mi>y</mi><mtext>aktuell</mtext></msub></mrow><annotation encoding=\"application/x-tex\">\n\\text{Fehler} = y_\\text{ideal} - y_\\text{aktuell}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">Fehler</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">ideal</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">aktuell</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<ul>\n<li>Wenn Fehler &gt; 0 → die Linie liegt <strong>über</strong> der Pixelmitte → y muss erhöht werden.  </li>\n<li>Wenn Fehler ≤ 0 → die Linie liegt <strong>unterhalb</strong> oder auf der Pixelmitte → y bleibt gleich.</li>\n</ul>\n<h3>5.1. Problem: Gleitkomma vermeiden</h3>\n<ul>\n<li>Um nur mit <strong>Ganzzahlen</strong> zu rechnen, multiplizieren wir alles mit <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\">x</span></span></span></span>, um den Bruch <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mi>y</mi><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"normal\">Δ</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta y / \\Delta x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">/Δ</span><span class=\"mord mathnormal\">x</span></span></span></span> zu eliminieren:</li>\n</ul>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mi>x</mi><mo>⋅</mo><mtext>Fehler</mtext><mo>=</mo><mi mathvariant=\"normal\">Δ</mi><mi>x</mi><mo>⋅</mo><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mtext>ideal</mtext></msub><mo>−</mo><msub><mi>y</mi><mtext>aktuell</mtext></msub><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">Δ</mi><mi>y</mi><mo>⋅</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>−</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo><mo>+</mo><mi mathvariant=\"normal\">Δ</mi><mi>x</mi><mo>⋅</mo><msub><mi>y</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo><mo>−</mo><mi mathvariant=\"normal\">Δ</mi><mi>x</mi><mo>⋅</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">\n\\Delta x \\cdot \\text{Fehler} = \\Delta x \\cdot (y_\\text{ideal} - y_\\text{aktuell}) \n= (\\Delta y \\cdot (x - x_0) + \\Delta x \\cdot y_0) - \\Delta x \\cdot y\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord text\"><span class=\"mord\">Fehler</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">ideal</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">aktuell</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span></p>\n<ul>\n<li>Definiere den <strong>entscheidenden Ganzzahl-Fehlerterm</strong>:</li>\n</ul>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>D</mi><mo>=</mo><mn>2</mn><mi mathvariant=\"normal\">Δ</mi><mi>y</mi><mo>−</mo><mi mathvariant=\"normal\">Δ</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\nD = 2 \\Delta y - \\Delta x\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\">2Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\">x</span></span></span></span></span></p>\n<blockquote>\n<p>Durch geschicktes Multiplizieren mit <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi mathvariant=\"normal\">Δ</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">2 \\Delta y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\">2Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> und <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\">x</span></span></span></span> können wir <strong>nur Ganzzahlen verwenden</strong>, ohne Gleitkomma.</p>\n</blockquote>\n<hr>\n<h2>6. Iteration mit dem Fehlerterm</h2>\n<p>Für jede Spalte <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> (von <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> bis <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>):</p>\n<ol>\n<li>Zeichne Pixel <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x, y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span>  </li>\n<li>Prüfe den Fehlerterm <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span>:  <ul>\n<li>Wenn <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">D &gt; 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7224em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span>: Pixel in <strong>y-Richtung erhöhen</strong>, und Fehler anpassen: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mo>=</mo><mi>D</mi><mo>−</mo><mn>2</mn><mi mathvariant=\"normal\">Δ</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">D = D - 2 \\Delta x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">2Δ</span><span class=\"mord mathnormal\">x</span></span></span></span>  </li>\n<li>Immer: Fehler erhöhen: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mo>=</mo><mi>D</mi><mo>+</mo><mn>2</mn><mi mathvariant=\"normal\">Δ</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">D = D + 2 \\Delta y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\">2Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></li>\n</ul>\n</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> wird immer um 1 erhöht (oder <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> bei steilen Linien)</li>\n</ol>\n<hr>\n<h2>7. Steile Linien</h2>\n<ul>\n<li>Wenn <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">Δ</mi><mi>y</mi><mi mathvariant=\"normal\">∣</mi><mo>&gt;</mo><mi mathvariant=\"normal\">∣</mi><mi mathvariant=\"normal\">Δ</mi><mi>x</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">|\\Delta y| &gt; |\\Delta x|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣Δ</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∣</span></span></span></span> → Linie steiler als 45°  </li>\n<li>Lösung: <strong>x und y tauschen</strong>, Algorithmus unverändert  </li>\n<li>Vorzeichen berücksichtigen:</li>\n</ul>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>s</mi><mi>x</mi></msub><mo>=</mo><mtext>sign</mtext><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo>−</mo><msub><mi>x</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mspace width=\"1em\"/><msub><mi>s</mi><mi>y</mi></msub><mo>=</mo><mtext>sign</mtext><mo stretchy=\"false\">(</mo><msub><mi>y</mi><mn>1</mn></msub><mo>−</mo><msub><mi>y</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\ns_x = \\text{sign}(x_1 - x_0), \\quad s_y = \\text{sign}(y_1 - y_0)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">sign</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">sign</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<ul>\n<li>Damit funktioniert der Algorithmus in allen vier Richtungen.</li>\n</ul>\n<hr>\n<h2>8. Zusammenfassung</h2>\n<ul>\n<li>Fehlerterm <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> misst <strong>Abweichung der idealen Linie vom aktuellen Pixel</strong>  </li>\n<li>Entscheidung: <strong>Pixel in y-Richtung erhöhen oder nicht</strong>  </li>\n<li>Nur Ganzzahlen → sehr effizient  </li>\n<li>Ergebnis: <strong>pixelgenaue Linie</strong>, die der idealen Linie sehr nahekommt</li>\n</ul>\n",
    "starterVertexShader": "precision highp float;\n\nin vec3 position;\nin vec3 normal;\nin vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\n\nout vec2 vUV;\n\nvoid main() {\n    vUV = uv;\n    gl_Position = vec4(position, 1.0);\n}",
    "starterFragmentShader": "precision highp float;\n\nin vec2 vUV;\nout vec4 fragColor;\n\nuniform vec2 iResolution;\n\nconst int GRID_SIZE = 32;\n\n// Convert from UV (0–1) to aspect-corrected space (-1–1)\nvec2 aspectCorrectUV(vec2 uv) {\n    vec2 p = uv * 2.0 - 1.0;\n    p.x *= iResolution.x / iResolution.y;\n    return p;\n}\n\n// Convert pixel grid coordinate to aspect-corrected UV space (-1..1)\nvec2 gridToUV(int x, int y) {\n    vec2 p = (vec2(float(x), float(y)) / float(GRID_SIZE)) * 2.0 - 1.0;\n    p.x *= iResolution.x / iResolution.y;\n    return p;\n}\n\n// Determine if the fragment lies inside a grid pixel (square)\nbool isInsidePixel(vec2 uv, int x, int y) {\n    // Compute bounds in aspect-corrected space\n    vec2 minP = gridToUV(x, y);\n    vec2 maxP = gridToUV(x + 1, y + 1);\n\n    // Compute fragment position\n    vec2 f = aspectCorrectUV(uv);\n\n    return all(greaterThanEqual(f, minP)) && all(lessThan(f, maxP));\n}\n\n// Draw a single pixel cell with color\nvoid drawPixel(int x, int y, inout vec3 color, vec3 pixelColor) {\n    if (isInsidePixel(vUV, x, y)) {\n        color = pixelColor;\n    }\n}\n\n// Integer Bresenham line\nvoid bresenhamLine(int x0, int y0, int x1, int y1, inout vec3 color) {\n\n}\n\nvoid main() {\n    vec3 color = vec3(0.12); // dark gray background\n\n    // Optional grid lines (1px thin)\n    vec2 uv = vUV * float(GRID_SIZE);\n    vec2 gridLine = smoothstep(0.98, 1.0, abs(fract(uv) - 0.5) * 2.0);\n    float gridMask = min(gridLine.x, gridLine.y);\n    color = mix(vec3(0.15), color, gridMask);\n\n    // Define line endpoints in grid coordinates\n    int x0 = int(0.05 * float(GRID_SIZE));\n    int y0 = int(0.25 * float(GRID_SIZE));\n    int x1 = int(0.95 * float(GRID_SIZE));\n    int y1 = int(0.85 * float(GRID_SIZE));\n\n    // Draw Bresenham line\n    bresenhamLine(x0, y0, x1, y1, color);\n\n    fragColor = vec4(color, 1.0);\n}",
    "referenceVertexShader": "precision highp float;\n\nin vec3 position;\nin vec3 normal;\nin vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\n\nout vec2 vUV;\n\nvoid main() {\n    vUV = uv;\n    gl_Position = vec4(position, 1.0);\n}",
    "referenceFragmentShader": "precision highp float;\n\nin vec2 vUV;\nout vec4 fragColor;\n\nuniform vec2 iResolution;\n\nconst int GRID_SIZE = 64;\n\n// Convert from UV (0–1) to aspect-corrected space (-1–1)\nvec2 aspectCorrectUV(vec2 uv) {\n    vec2 p = uv * 2.0 - 1.0;\n    p.x *= iResolution.x / iResolution.y;\n    return p;\n}\n\n// Convert pixel grid coordinate to aspect-corrected UV space (-1..1)\nvec2 gridToUV(int x, int y) {\n    vec2 p = (vec2(float(x), float(y)) / float(GRID_SIZE)) * 2.0 - 1.0;\n    p.x *= iResolution.x / iResolution.y;\n    return p;\n}\n\n// Determine if the fragment lies inside a grid pixel (square)\nbool isInsidePixel(vec2 uv, int x, int y) {\n    // Compute bounds in aspect-corrected space\n    vec2 minP = gridToUV(x, y);\n    vec2 maxP = gridToUV(x + 1, y + 1);\n\n    // Compute fragment position\n    vec2 f = aspectCorrectUV(uv);\n\n    return all(greaterThanEqual(f, minP)) && all(lessThan(f, maxP));\n}\n\n// Draw a single pixel cell with color\nvoid drawPixel(int x, int y, inout vec3 color, vec3 pixelColor) {\n    if (isInsidePixel(vUV, x, y)) {\n        color = pixelColor;\n    }\n}\n\n// Integer Bresenham line\nvoid bresenhamLine(int x0, int y0, int x1, int y1, inout vec3 color) {\n    int dx = abs(x1 - x0);\n    int sx = x0 < x1 ? 1 : -1;\n    int dy = -abs(y1 - y0);\n    int sy = y0 < y1 ? 1 : -1;\n    int err = dx + dy;\n    int e2;\n\n    int x = x0;\n    int y = y0;\n\n    for (int i = 0; i < 512; i++) { // safety loop\n        drawPixel(x, y, color, vec3(1.0, 0.0, 0.0)); // red pixel\n\n        if (x == x1 && y == y1) break;\n\n        e2 = 2 * err;\n        if (e2 >= dy) { err += dy; x += sx; }\n        if (e2 <= dx) { err += dx; y += sy; }\n    }\n}\n\nvoid main() {\n    vec3 color = vec3(0.12); // dark gray background\n\n    // Define line endpoints in grid coordinates\n    int x0 = int(0.05 * float(GRID_SIZE));\n    int y0 = int(0.25 * float(GRID_SIZE));\n    int x1 = int(0.95 * float(GRID_SIZE));\n    int y1 = int(0.85 * float(GRID_SIZE));\n\n    // Draw Bresenham line\n    bresenhamLine(x0, y0, x1, y1, color);\n\n    fragColor = vec4(color, 1.0);\n}"
  },
  {
    "category": "Grundlagen Computergrafik",
    "type": "3D",
    "title": "Lambert",
    "modelPath": "models/HeadDavid.glb",
    "hints": [
      "Transformiere die Normalen korrekt mit der `normalMatrix` für eine richtige Beleuchtung",
      "Berechne den Diffusfaktor mit dot(normal, lightDir)",
      "Klippe den Diffuswert mit max(), um negative Beleuchtung zu vermeiden",
      "Multipliziere die Basisfarbe mit dem Diffusfaktor, um die endgültige Beleuchtung zu erhalten"
    ],
    "task": "<p>Erstelle ein Programm, das diffuse Beleuchtung basierend auf einer Richtungslichtquelle implementiert.  </p>\n<ul>\n<li>erster Stichpunkt</li>\n<li>zweiter Stichpunkt</li>\n</ul>\n",
    "theory": "<p>Lambert-Beleuchtung ist ein einfaches Modell für diffuse Lichtberechnung, bei dem die Helligkeit einer Oberfläche vom Winkel zwischen der <strong>Oberflächennormalen</strong> und der <strong>Richtung der Lichtquelle</strong> abhängt.</p>\n<p>In <strong>GLSL</strong> werden die Normalen der Vertices über <code>out</code>-Variablen an den Fragment-Shader weitergegeben. Der diffuse Beleuchtungsfaktor wird als <strong>Skalarprodukt</strong> zwischen der normalisierten Normalen und der normalisierten Licht-Richtung berechnet:</p>\n",
    "starterVertexShader": "precision highp float;\n\nin vec3 position;\nin vec3 normal;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\n\nout vec3 vNormal;\n\nvoid main() {\n  // transform normal to view space and pass to fragment shader\n  vNormal = normalize(normalMatrix * normal);\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}",
    "starterFragmentShader": "precision highp float;\n\nin vec3 vNormal;\nout vec4 fragColor;\n\nvoid main() {\n  // simple placeholder white color\n  fragColor = vec4(0.18, 0.18, 0.18, 1.0);\n}",
    "referenceVertexShader": "precision highp float;\n\nin vec3 position;\nin vec3 normal;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\n\nout vec3 vNormal;\n\nvoid main() {\n  vNormal = normalize(normalMatrix * normal);\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}",
    "referenceFragmentShader": "precision highp float;\n\nin vec3 vNormal;\nout vec4 fragColor;\n\nvoid main() {\n  vec3 lightDir = normalize(vec3(1.0, 1.0, 1.0));\n  vec3 baseColor = vec3(0.8, 0.4, 0.2);\n  float diffuse = max(dot(vNormal, lightDir), 0.0);\n  vec3 color = baseColor * diffuse;\n  fragColor = vec4(color, 1.0);\n}"
  },
  {
    "category": "Grundlagen Computergrafik",
    "type": "3D",
    "title": "Phong",
    "modelPath": "models/HeadDavid.glb",
    "hints": [
      "Transformiere die Normalen korrekt mit der `normalMatrix` für eine richtige Beleuchtung",
      "Berechne die diffuse Komponente mit `dot(normal, lightDir)` und clamp sie mit `max()`",
      "Berechne die specular Komponente mit `pow(max(dot(reflectDir, viewDir), 0.0), shininess)`",
      "Addiere ambient, diffuse und specular Komponente, um die endgültige Beleuchtung zu erhalten"
    ],
    "task": "<p>Erstelle ein Programm, das <strong>Phong-Beleuchtung</strong> basierend auf einer Richtungslichtquelle implementiert.  </p>\n<ul>\n<li>erster Stichpunkt</li>\n<li>zweiter Stichpunkt</li>\n</ul>\n",
    "theory": "<p>Phong-Beleuchtung ist ein Modell für diffuse und spiegelnde Beleuchtung. Die Helligkeit einer Oberfläche hängt von drei Komponenten ab:</p>\n<ol>\n<li><strong>Ambient</strong>: Grundhelligkeit der Szene</li>\n<li><strong>Diffuse</strong>: Helligkeit basierend auf dem Winkel zwischen Normalen und Lichtquelle</li>\n<li><strong>Specular</strong>: Glanzlichter basierend auf dem Winkel zwischen reflektiertem Licht und Blickrichtung</li>\n</ol>\n<p>In <strong>GLSL</strong> werden die Normalen der Vertices über <code>out</code>-Variablen an den Fragment-Shader weitergegeben. Diffuse und specular werden berechnet und dann mit der Basisfarbe kombiniert.</p>\n",
    "starterVertexShader": "precision highp float;\n\nin vec3 position;\nin vec3 normal;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\n\nout vec3 vNormal;\nout vec3 vPosition;\n\nvoid main() {\n    vNormal = normalize(normalMatrix * normal);\n    vPosition = vec3(modelViewMatrix * vec4(position, 1.0));\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}",
    "starterFragmentShader": "precision highp float;\n\nin vec3 vNormal;\nin vec3 vPosition;\n\nout vec4 fragColor;\n\nvoid main() {\n    fragColor = vec4(0.18, 0.18, 0.18, 1.0);\n}",
    "referenceVertexShader": "precision highp float;\n\nin vec3 position;\nin vec3 normal;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\n\nout vec3 vNormal;\nout vec3 vPosition;\n\nvoid main() {\n    vNormal = normalize(normalMatrix * normal);\n    vPosition = vec3(modelViewMatrix * vec4(position, 1.0));\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}",
    "referenceFragmentShader": "precision highp float;\n\nin vec3 vNormal;\nin vec3 vPosition;\n\nout vec4 fragColor;\n\nvoid main() {\n    vec3 lightDir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 viewDir = normalize(-vPosition);\n    vec3 baseColor = vec3(0.8, 0.4, 0.2);\n\n    // Diffuse component\n    float diffuse = max(dot(vNormal, lightDir), 0.0);\n\n    // Specular component\n    vec3 reflectDir = reflect(-lightDir, vNormal);\n    float specular = pow(max(dot(reflectDir, viewDir), 0.0), 32.0);\n\n    // Ambient component\n    vec3 ambient = vec3(0.1);\n\n    vec3 color = ambient + baseColor * diffuse + specular * vec3(1.0);\n    fragColor = vec4(color, 1.0);\n}"
  },
  {
    "category": "Grundlagen Computergrafik",
    "type": "3D",
    "title": "Planeten System",
    "modelPath": "models/Sphere.glb",
    "instanceCount": 10,
    "hints": [
      "Verwende gl_InstanceID, um zwischen den Planeten im Shader zu unterscheiden.",
      "Die Reihenfolge der Matrixmultiplikation ist entscheidend: Translation * Rotation * Skalierung wendet die Skalierung zuerst an.",
      "Um eine Hierarchie zu schaffen (z.B. Mond um Erde), multipliziere die Transformation des Kindes mit der des Elternteils: earthMatrix * moonMatrix.",
      "Benutze den time-Uniform, um die Rotationswinkel zu animieren."
    ],
    "task": "<p>Erstelle ein hierarchisches Planetensystem (Sonne, Erde, Mond) mithilfe von Instancing. Alle Transformationslogiken, wie Rotation und Translation, sollen direkt im Vertex-Shader unter Verwendung von Matrizen und dem gl_InstanceID implementiert werden.</p>\n",
    "theory": "<p>Hierarchische Transformationen ermöglichen es, Objekte relativ zueinander zu positionieren und zu bewegen. In der Computergrafik wird dies durch die Multiplikation von Transformationsmatrizen erreicht.</p>\n<p>Ein Objekt (z.B. der Mond) kann an ein anderes Objekt (die Erde) &quot;gebunden&quot; werden, indem seine eigene lokale Transformation (Rotation und Abstand zur Erde) mit der Transformation des Elternobjekts (die Position der Erde im Sonnensystem) multipliziert wird.</p>\n<p>Die finale Transformationsmatrix für den Mond wäre also:\nfinalMoonMatrix = projectionMatrix * viewMatrix * earthMatrix * localMoonMatrix</p>\n<p>Indem wir dies für jede Instanz im Vertex-Shader tun, können wir mit einem einzigen Draw-Call ein ganzes, animiertes System rendern.</p>\n",
    "starterVertexShader": "precision highp float;\n\nin vec3 position;\nin vec3 normal;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float time;\n\nout vec3 vNormal;\nout vec3 vColor;\n\nvoid main() {\n    if (gl_InstanceID == 0) {\n        // --- Sonne ---\n\n    } else if (gl_InstanceID == 1) {\n        // --- Erde ---\n\n    } else if (gl_InstanceID == 2) {\n        // --- Mond ---\n   \n    }\n\n    vColor = vec3(1.0, 0.8, 0.2);\n    vNormal = normal;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}",
    "starterFragmentShader": "precision highp float;\n\nin vec3 vNormal;\nin vec3 vColor; // Farbe vom Vertex Shader empfangen\n\nout vec4 fragColor;\n\nvoid main() {\n    vec3 lightDir = normalize(vec3(0.5, 0.5, 1.0)); // world-space light\n    float diffuse = max(dot(normalize(vNormal), lightDir), 0.0);\n        \n    // Umgebungslicht, damit die dunkle Seite nicht komplett schwarz ist\n    float ambient = 0.2;\n    \n    // Farbe mit Beleuchtung kombinieren\n    vec3 finalColor = vColor * (diffuse + ambient);\n    \n    fragColor = vec4(finalColor, 1.0);\n}",
    "referenceVertexShader": "precision highp float;\n\nin vec3 position;\nin vec3 normal;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float time;\n\nout vec3 vNormal;\nout vec3 vColor;\n\n// Helper functions\nmat4 translation(vec3 t) {\n    return mat4(\n        1.0, 0.0, 0.0, 0.0,\n        0.0, 1.0, 0.0, 0.0,\n        0.0, 0.0, 1.0, 0.0,\n        t.x, t.y, t.z, 1.0\n    );\n}\n\nmat4 scale(vec3 s) {\n    return mat4(\n        s.x, 0.0, 0.0, 0.0,\n        0.0, s.y, 0.0, 0.0,\n        0.0, 0.0, s.z, 0.0,\n        0.0, 0.0, 0.0, 1.0\n    );\n}\n\nmat4 rotationY(float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat4(\n        c, 0.0, s, 0.0,\n        0.0, 1.0, 0.0, 0.0,\n        -s, 0.0, c, 0.0,\n        0.0, 0.0, 0.0, 1.0\n    );\n}\n\nvoid main() {\nmat4 modelMatrix = mat4(1.0);\n\n// Declare variables for artistic scale and orbital speed\nfloat planetScale = 0.25;  // default, overridden below\nfloat speed = 0.0;   // default, overridden below\n\nif (gl_InstanceID == 0) {\n    // Sun\n    vColor = vec3(1.0, 0.8, 0.2);\n    planetScale = 2.0;\n    modelMatrix = scale(vec3(planetScale));\n\n} else if (gl_InstanceID == 1) {\n    // Earth\n    vColor = vec3(0.2, 0.4, 1.0);\n    planetScale = 0.7;\n    speed = 1.0;\n    modelMatrix = rotationY(time * speed) * translation(vec3(5.0, 0.0, 0.0)) * scale(vec3(planetScale));\n\n} else if (gl_InstanceID == 2) {\n    // Moon\n    vColor = vec3(0.5, 0.5, 0.5);\n    planetScale = 0.25;\n    speed = 12.0; // fast around Earth\n    mat4 earthMatrix = rotationY(time * 1.0) * translation(vec3(5.0, 0.0, 0.0));\n    mat4 moonMatrix  = rotationY(time * speed) * translation(vec3(1.5, 0.0, 0.0)) * scale(vec3(planetScale));\n    modelMatrix = earthMatrix * moonMatrix;\n\n} else if (gl_InstanceID == 3) {\n    // Mercury\n    vColor = vec3(0.8, 0.6, 0.4);\n    planetScale = 0.3;\n    speed = 4.15;\n    modelMatrix = rotationY(time * speed) * translation(vec3(3.0, 0.0, 0.0)) * scale(vec3(planetScale));\n\n} else if (gl_InstanceID == 4) {\n    // Venus\n    vColor = vec3(1.0, 0.7, 0.3);\n    planetScale = 0.5;\n    speed = 1.62;\n    modelMatrix = rotationY(time * speed) * translation(vec3(4.0, 0.0, 0.0)) * scale(vec3(planetScale));\n\n} else if (gl_InstanceID == 5) {\n    // Mars\n    vColor = vec3(1.0, 0.3, 0.2);\n    planetScale = 0.5;\n    speed = 0.53;\n    modelMatrix = rotationY(time * speed) * translation(vec3(7.0, 0.0, 0.0)) * scale(vec3(planetScale));\n\n} else if (gl_InstanceID == 6) {\n    // Jupiter\n    vColor = vec3(1.0, 0.9, 0.6);\n    planetScale = 1.5;\n    speed = 0.08;\n    modelMatrix = rotationY(time * speed) * translation(vec3(10.0, 0.0, 0.0)) * scale(vec3(planetScale));\n\n} else if (gl_InstanceID == 7) {\n    // Saturn\n    vColor = vec3(0.9, 0.8, 0.5);\n    planetScale = 1.2;\n    speed = 0.03;\n    modelMatrix = rotationY(time * speed) * translation(vec3(13.0, 0.0, 0.0)) * scale(vec3(planetScale));\n\n} else if (gl_InstanceID == 8) {\n    // Uranus\n    vColor = vec3(0.5, 0.9, 1.0);\n    planetScale = 1.0;\n    speed = 0.01;\n    modelMatrix = rotationY(time * speed) * translation(vec3(16.0, 0.0, 0.0)) * scale(vec3(planetScale));\n\n} else if (gl_InstanceID == 9) {\n    // Neptune\n    vColor = vec3(0.3, 0.5, 1.0);\n    planetScale = 0.95;\n    speed = 0.006;\n    modelMatrix = rotationY(time * speed) * translation(vec3(19.0, 0.0, 0.0)) * scale(vec3(planetScale));\n}\n\n// Normals\nmat3 normalMatrix = mat3(transpose(inverse(modelMatrix)));\nvNormal = normalize(normalMatrix * normal);\ngl_Position = projectionMatrix * modelViewMatrix * modelMatrix * vec4(position, 1.0);\n}",
    "referenceFragmentShader": "precision highp float;\n\nin vec3 vNormal;\nin vec3 vColor; // Farbe vom Vertex Shader empfangen\n\nout vec4 fragColor;\n\nvoid main() {\n    vec3 lightDir = normalize(vec3(0.5, 0.5, 1.0)); // world-space light\n    float diffuse = max(dot(normalize(vNormal), lightDir), 0.0);\n        \n    // Umgebungslicht, damit die dunkle Seite nicht komplett schwarz ist\n    float ambient = 0.2;\n    \n    // Farbe mit Beleuchtung kombinieren\n    vec3 finalColor = vColor * (diffuse + ambient);\n    \n    fragColor = vec4(finalColor, 1.0);\n}"
  },
  {
    "category": "Grundlagen Computergrafik",
    "type": "2D",
    "title": "SDF Circle",
    "modelPath": "models/Cube.glb",
    "hints": [
      "Berechne den Abstand von jedem Pixel zum Zentrum der Fläche",
      "Verwende `length(position - center)` für den Abstand",
      "Verwende `smoothstep()` für weiche Kanten",
      "Setze die Farbe basierend auf dem Vorzeichen des Abstands"
    ],
    "task": "<p>Erstelle ein Fragment-Shader-Programm, das einen <strong>Signed Distance Field (SDF) Kreis</strong> zeichnet.  </p>\n<ul>\n<li>Berechne für jedes Pixel den Abstand zum Kreis-Zentrum</li>\n<li>Färbe die Pixel innerhalb des Kreises anders als die außerhalb</li>\n</ul>\n",
    "theory": "<p>Signed Distance Fields (SDFs) speichern für jedes Pixel den <strong>Abstand zur nächstgelegenen Oberfläche</strong>.  </p>\n<ul>\n<li>Negative Werte: innerhalb des Objekts  </li>\n<li>Positive Werte: außerhalb des Objekts  </li>\n<li>Null: auf der Kontur</li>\n</ul>\n<p>Für einen Kreis: <code>distance = length(pixelPos - center) - radius</code>.<br>Die Farbe kann dann z.B. über <code>smoothstep()</code> interpoliert werden, um weiche Kanten zu erzeugen.</p>\n",
    "starterVertexShader": "precision highp float;\n\nin vec3 position;\nin vec3 normal;\nin vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\n\nout vec2 vUV;\nout vec3 vNormal;\n\nvoid main() {\n    vUV = uv;\n    vNormal = normalize(normalMatrix * normal);\n    gl_Position = vec4(position, 1.0);\n}",
    "starterFragmentShader": "precision highp float;\n\nin vec2 vUV;\nout vec4 fragColor;\n\nvoid main() {\n    // Simple placeholder: dark gray background\n    fragColor = vec4(0.1, 0.1, 0.1, 1.0);\n}",
    "referenceVertexShader": "precision highp float;\n\nin vec3 position;\nin vec3 normal;\nin vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\n\nout vec2 vUV;\nout vec3 vNormal;\n\nvoid main() {\n    vUV = uv;\n    vNormal = normalize(normalMatrix * normal);\n    gl_Position = vec4(position, 1.0);\n}",
    "referenceFragmentShader": "precision highp float;\n\nin vec2 vUV;\nout vec4 fragColor;\n\nuniform vec2 iResolution;\n\nvoid main() {\n    // Normalize UV to -1..1 and correct for aspect ratio\n    vec2 uv = vUV * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec2 center = vec2(0.0, 0.0);\n    float radius = 0.5;\n\n    float dist = length(uv - center);\n\n    vec3 color = dist < radius ? vec3(1.0, 0.0, 0.0) : vec3(0.0, 0.0, 0.0);\n    fragColor = vec4(color, 1.0);\n}"
  },
  {
    "category": "Grundlagen Computergrafik",
    "type": "3D",
    "title": "Zahnräder",
    "modelPath": "models/Gear.glb",
    "instanceCount": 3,
    "hints": [
      "Verwende gl_InstanceID, um zwischen den Zahnrädern im Shader zu unterscheiden.",
      "Die Reihenfolge der Matrixmultiplikation ist entscheidend: Translation * Rotation * Skalierung wendet die Skalierung zuerst an.",
      "Um eine Hierarchie (z. B. Zahnrad C greift in B ein) zu erzeugen, multipliziere die Transformationen der Zahnräder abhängig voneinander.",
      "Benutze den time-Uniform, um die Rotationen zu animieren."
    ],
    "task": "<p>Erstelle ein hierarchisches System aus drei Zahnrädern (A, B, C).<br>Alle Zahnräder sollen sich um ihre jeweilige Achse drehen, und die Drehungen sollen so abgestimmt sein, dass sie korrekt ineinandergreifen.<br>Die Transformationen werden ausschließlich im <strong>Vertex Shader</strong> unter Verwendung von Matrizen und dem <strong>gl_InstanceID</strong> berechnet.</p>\n",
    "theory": "<p>Zahnräder sind ein klassisches Beispiel für gekoppelte, gegenläufige Rotationen.<br>Wenn Zahnrad A sich im Uhrzeigersinn dreht, muss Zahnrad B sich entgegengesetzt drehen, und Zahnrad C wiederum entgegengesetzt zu B.<br>Diese Bewegung kann durch Rotationsmatrizen im Shader simuliert werden.</p>\n<p>Die finale Matrix für jedes Zahnrad setzt sich zusammen aus: finalMatrix = projectionMatrix * viewMatrix * translation * rotation * scale</p>\n<p>Um Abhängigkeiten (z. B. Zahnrad C hängt an B) zu simulieren:</p>\n<p>finalCMatrix = projectionMatrix * viewMatrix * transformB * localCMatrix</p>\n",
    "starterVertexShader": "precision highp float;\n\nin vec3 position;\nin vec3 normal;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float time;\n\nout vec3 vNormal;\nout vec3 vColor;\n\nvoid main() {\n    mat4 modelMatrix = mat4(1.0);\n\n    if (gl_InstanceID == 0) {\n        // --- Zahnrad A ---\n\n    } else if (gl_InstanceID == 1) {\n        // --- Zahnrad B ---\n\n    } else if (gl_InstanceID == 2) {\n        // --- Zahnrad C ---\n\n    }\n\n    vColor = vec3(1.0);\n    vNormal = normal;\n    gl_Position = projectionMatrix * modelViewMatrix * modelMatrix * vec4(position, 1.0);\n}",
    "starterFragmentShader": "precision highp float;\n\nin vec3 vNormal;\nin vec3 vColor;\n\nout vec4 fragColor;\n\nvoid main() {\n    vec3 lightDir = normalize(vec3(1.0, 0.5, 1.0));\n    float diffuse = max(dot(normalize(vNormal), lightDir), 0.0);\n    float ambient = 0.2;\n    vec3 finalColor = vColor * (diffuse + ambient);\n    fragColor = vec4(finalColor, 1.0);\n}",
    "referenceVertexShader": "precision highp float;\n\nin vec3 position;\nin vec3 normal;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float time;\n\nout vec3 vNormal;\nout vec3 vColor;\n\n// Helper functions\nmat4 translation(vec3 t) {\n    return mat4(\n        1.0, 0.0, 0.0, 0.0,\n        0.0, 1.0, 0.0, 0.0,\n        0.0, 0.0, 1.0, 0.0,\n        t.x, t.y, t.z, 1.0\n    );\n}\n\nmat4 scale(vec3 s) {\n    return mat4(\n        s.x, 0.0, 0.0, 0.0,\n        0.0, s.y, 0.0, 0.0,\n        0.0, 0.0, s.z, 0.0,\n        0.0, 0.0, 0.0, 1.0\n    );\n}\n\nmat4 rotationX(float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat4(\n        1.0, 0.0, 0.0, 0.0,\n        0.0, c, -s, 0.0,\n        0.0, s,  c, 0.0,\n        0.0, 0.0, 0.0, 1.0\n    );\n}\n\nvoid main() {\n    mat4 modelMatrix = mat4(1.0);\n\n    // Radii for spacing\n    float radiusA = 2.0;\n    float radiusB = 1.0;\n    float radiusC = 1.5;\n\n    if (gl_InstanceID == 0) {\n        // --- Zahnrad A ---\n        vColor = vec3(1.0, 0.4, 0.2);\n        mat4 sA = scale(vec3(2.0));\n        mat4 rotA = rotationX(time * 0.2 * 6.2831);\n        mat4 transA = translation(vec3(0.0, -0.5, 0.0));\n        modelMatrix = transA * rotA * sA;\n\n    } else if (gl_InstanceID == 1) {\n        // --- Zahnrad B ---\n        vColor = vec3(0.2, 0.6, 1.0);\n        mat4 sB = scale(vec3(1.0));\n        mat4 rotB = rotationX(-time * 0.4 * 6.2831);\n        // place B right next to A\n        mat4 transB = translation(vec3(0.0, radiusA + radiusB, 0.0));\n        modelMatrix = transB * rotB * sB;\n\n    } else if (gl_InstanceID == 2) {\n        // --- Zahnrad C ---\n        vColor = vec3(0.7, 0.8, 0.2);\n        mat4 sC = scale(vec3(1.5));\n        mat4 rotC = rotationX(time * 0.6 * 6.2831);\n        // place C right next to B\n        float yB = radiusA + radiusB + 0.5;\n        float yC = yB + radiusB + radiusC; // sum distances\n        mat4 transC = translation(vec3(0.0, yC, 0.0));\n        modelMatrix = transC * rotC * sC;\n    }\n\n    // Normals korrekt transformieren\n    mat3 normalMatrix = mat3(transpose(inverse(modelMatrix)));\n    vNormal = normalize(normalMatrix * normal);\n\n    gl_Position = projectionMatrix * modelViewMatrix * modelMatrix * vec4(position, 1.0);\n}",
    "referenceFragmentShader": "precision highp float;\n\nin vec3 vNormal;\nin vec3 vColor;\n\nout vec4 fragColor;\n\nvoid main() {\n    vec3 lightDir = normalize(vec3(1.0, 0.5, 1.0));\n    float diffuse = max(dot(normalize(vNormal), lightDir), 0.0);\n    float ambient = 0.2;\n    vec3 finalColor = vColor * (diffuse + ambient);\n    fragColor = vec4(finalColor, 1.0);\n}"
  }
]